// Mocks generated by Mockito 5.4.6 from annotations
// in ghsender/test/unit/jog_controller_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter_bloc/flutter_bloc.dart' as _i6;
import 'package:ghsender/bloc/communication/cnc_communication_bloc.dart' as _i8;
import 'package:ghsender/bloc/communication/cnc_communication_event.dart'
    as _i9;
import 'package:ghsender/bloc/communication/cnc_communication_state.dart'
    as _i3;
import 'package:ghsender/bloc/machine_controller/machine_controller_bloc.dart'
    as _i4;
import 'package:ghsender/bloc/machine_controller/machine_controller_event.dart'
    as _i7;
import 'package:ghsender/bloc/machine_controller/machine_controller_state.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMachineControllerState_0 extends _i1.SmartFake
    implements _i2.MachineControllerState {
  _FakeMachineControllerState_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCncCommunicationState_1 extends _i1.SmartFake
    implements _i3.CncCommunicationState {
  _FakeCncCommunicationState_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [MachineControllerBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMachineControllerBloc extends _i1.Mock
    implements _i4.MachineControllerBloc {
  MockMachineControllerBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MachineControllerState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeMachineControllerState_0(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i2.MachineControllerState);

  @override
  _i5.Stream<_i2.MachineControllerState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i5.Stream<_i2.MachineControllerState>.empty(),
          )
          as _i5.Stream<_i2.MachineControllerState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void onTransition(
    _i6.Transition<_i7.MachineControllerEvent, _i2.MachineControllerState>?
    transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void add(_i7.MachineControllerEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i7.MachineControllerEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i2.MachineControllerState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i7.MachineControllerEvent>(
    _i6.EventHandler<E, _i2.MachineControllerState>? handler, {
    _i6.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i6.Change<_i2.MachineControllerState>? change) =>
      super.noSuchMethod(
        Invocation.method(#onChange, [change]),
        returnValueForMissingStub: null,
      );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [CncCommunicationBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockCncCommunicationBloc extends _i1.Mock
    implements _i8.CncCommunicationBloc {
  MockCncCommunicationBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<_i9.CncMessage> get messageStream =>
      (super.noSuchMethod(
            Invocation.getter(#messageStream),
            returnValue: _i5.Stream<_i9.CncMessage>.empty(),
          )
          as _i5.Stream<_i9.CncMessage>);

  @override
  bool get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected), returnValue: false)
          as bool);

  @override
  String get statusMessage =>
      (super.noSuchMethod(
            Invocation.getter(#statusMessage),
            returnValue: _i10.dummyValue<String>(
              this,
              Invocation.getter(#statusMessage),
            ),
          )
          as String);

  @override
  _i3.CncCommunicationState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeCncCommunicationState_1(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i3.CncCommunicationState);

  @override
  _i5.Stream<_i3.CncCommunicationState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i5.Stream<_i3.CncCommunicationState>.empty(),
          )
          as _i5.Stream<_i3.CncCommunicationState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void onTransition(
    _i6.Transition<_i9.CncCommunicationEvent, _i3.CncCommunicationState>?
    transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void add(_i9.CncCommunicationEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i9.CncCommunicationEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i3.CncCommunicationState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i9.CncCommunicationEvent>(
    _i6.EventHandler<E, _i3.CncCommunicationState>? handler, {
    _i6.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i6.Change<_i3.CncCommunicationState>? change) =>
      super.noSuchMethod(
        Invocation.method(#onChange, [change]),
        returnValueForMissingStub: null,
      );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}
